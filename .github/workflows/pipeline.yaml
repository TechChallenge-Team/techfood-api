on:
  push:
    branches:
  pull_request:
    branches:
      - "**"
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"
      - name: Restore dependencies
        run: dotnet restore src/TechFood.Api/TechFood.Api.csproj
      - name: Build
        run: dotnet build --configuration Release src/TechFood.Api/TechFood.Api.csproj
      - name: Test
        run: dotnet test
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/techfood-api:latest -f src/TechFood.Api/Dockerfile .
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/techfood-api:latest

  publish:
    runs-on: ubuntu-latest
    needs: build
        test-validation:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v3
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                dotnet-version: "8.0.x"
            - name: Restore dependencies
              run: dotnet restore src/TechFood.Api/TechFood.Api.csproj
            - name: Run tests with coverage
              run: dotnet test src/TechFood.Api/TechFood.Api.csproj --collect:"XPlat Code Coverage"
            - name: Install ReportGenerator
              run: dotnet tool install --global dotnet-reportgenerator-globaltool
            - name: Generate coverage report
              run: reportgenerator -reports:src/TechFood.Api/TestResults/*/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:TextSummary
            - name: Check coverage threshold
              run: |
                COVERAGE=$(cat coverage-report/Summary.txt | grep 'Line coverage' | awk '{print $3}' | sed 's/%//')
                echo "Coverage: $COVERAGE%"
                if (( $(echo "$COVERAGE < 50" | bc -l) )); then
                  echo "Coverage is below 50%!"
                  exit 1
                fi
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"
      - name: Publish (simulado)
        run: echo "Publicação de artefato .NET (ajuste conforme necessário)"
